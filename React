import React, { useState, useRef } from 'react';
import "../index.css";
import "./tree.css"
import MenuIcon from '@mui/icons-material/Menu';
import ArrowForwardIcon from '@mui/icons-material/ArrowForward';
import CloseIcon from '@mui/icons-material/Close';
import { CardContent } from '@mui/material';
import { FlareSharp } from '@mui/icons-material';
import { DndProvider, useDrag, useDrop } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';



// const DraggableSidebarElement = ({ name, onDragStart }) => {
//   const [{ isDragging }, drag] = useDrag({
//     type: "SIDEBAR_ELEMENT",
//     item: { name },
//     end: (item, monitor) => {
//       const dropResult = monitor.getDropResult();
//       if (dropResult) {
//         // Handle the drop here
//         onDragStart(item, dropResult);
//       }
//     },
//     collect: (monitor) => ({
//       isDragging: monitor.isDragging(),
//     }),
//   });

//   return (
//     <div
//       ref={drag}
//       className={`sidebar-element${isDragging ? " dragging" : ""}`}
//     >
//       {name}
//     </div>
//   );
// };

const DraggableSidebarElement = ({ name }) => {
  const [{ isDragging }, drag] = useDrag(() => ({
    type: "SIDEBAR_ELEMENT",
    item: { name },
    collect: (monitor) => ({
      isDragging: monitor.isDragging(),
    }),
  }));

  return (
    <div
      className="sidebar-element"
      ref={drag}
    >
      {name}
    </div>
  );
};





const DraggableAppFrameElement = ({ name }) => {
  const [, drop] = useDrop({
    accept: "SIDEBAR_ELEMENT",
    drop: () => ({ name }),
  });

  return (
    <div ref={drop} className="app-frame-element">
      {name}
    </div>
  );
};


 

 


















function Pricemodel() {
  const boxStyle = {
    border: '1px solid #000', // Add a border around the text
    padding: '2px', // Add some padding for spacing
    display: 'inline-block',
     
    // Make sure the box doesn't take the full width
  };
 const sidebarRef = useRef(null);
 const boxContainerRef = useRef(null); // Added ref for the box container
 const [isResizing, setIsResizing] = useState(false);
 const [sidebarWidth, setSidebarWidth] = useState(261);

 const costsidebarRef = useRef(null);
 const minSidebarWidthWithText = 100;
 const [isCostPanelresizing, setIsCostPanelresizing] = useState({ resizing: false, initialX: 0 });

 const [costPanelWidth, setCostPanelWidth] = useState(261);
 const minCostPanelWidth = 50;

 const bottomsidebarRef = useRef(null);
 
 
 const [isBottomPanelresizing, setIsBottomPanelresizing] = useState(false);
 const [BottomPanelheight, setBottomPanelheight] = useState(145); // Corrected variable name
 const minBottomPanelheight = 100; // Corrected variable name
 const [isCollapsed,setIsCollapsed]=useState(false);
 const [isFormulaBarVisible, setFormulaBarVisible] = useState(false);
 const [isReferenceVisible, setReferenceVisible] = useState(false);
 const [isBottomSidebarOpen, setBottomSidebarOpen] = useState(true);
 const [isOpen,setIsOpen]=useState(true);
 const [sidebarElements, setSidebarElements] = useState([
  "Materials",
  "Feedstock",
  "Fees",
  "Conversion",
  "Equipment",
  "Energy",
  "Logistics",
  "Lane",
  "Warehousing",
]);

const handleDragStart = (draggedItem, dropResult) => {
  // Handle the dropped item here, and update the sidebar elements.
  const updatedSidebarElements = sidebarElements.filter(
    (element) => element !== draggedItem.name
  );
  setSidebarElements(updatedSidebarElements);
};

 const showFormulaBar = () => {
  setFormulaBarVisible(true);
  setReferenceVisible(false);
  setBottomSidebarOpen(true);
};

const showReference = () => {
  setFormulaBarVisible(false);
  setReferenceVisible(true);
  setBottomSidebarOpen(true);
};

const closeBottomSidebar = () => {
  setBottomSidebarOpen(false);
};
const openbottombar=()=>{
  setIsOpen(true);
}
 
 
 const startResizing = React.useCallback((mouseDownEvent) => {
  setIsResizing(true);
 }, []);

 const startCostPanelResizing = (mouseDownEvent) => {
  setIsCostPanelresizing({
    resizing: true,
    initialX: mouseDownEvent.clientX,
  });
};

 const stopResizing = React.useCallback(() => {
  setIsResizing(false);
 }, []);

 const stopCostPanelResizing = () => {
  setIsCostPanelresizing({ resizing: false, initialX: 0 });
};


 const togglesidePanel = () => {
    if (sidebarWidth <= minSidebarWidthWithText) {
      // If the sidebar is at the minimum width, expand it
      setSidebarWidth(261); // Set the desired width when expanded
    } else {
      setIsCollapsed(!isCollapsed);
    }
  };
  const togglesidePanelclose = () => {
    if (sidebarWidth > minSidebarWidthWithText) {
      // If the sidebar is at the minimum width, expand it
      setSidebarWidth(50); // Set the desired width when expanded
    } else {
      setIsCollapsed(isCollapsed);
    }
  };
  const toggleCostPanel = () => {
    if (costPanelWidth <= minCostPanelWidth) {
      // If the cost sidebar is at the minimum width, expand it
      setCostPanelWidth(300); // Set the desired width when expanded
    } else {
      setIsCostPanelresizing(!isCostPanelresizing);
    }
  };
  const togglecostPanelclose = () => {
    if (costPanelWidth > minCostPanelWidth) {
      // If the sidebar is at the minimum width, expand it
      setCostPanelWidth(50); // Set the desired width when expanded
    } else {
        setIsCostPanelresizing(isCostPanelresizing);
    }
}

const startBottomPanelResizing = (mouseDownEvent) => {
    setIsBottomPanelresizing({
      initialHeight: BottomPanelheight,
      mouseY: mouseDownEvent.clientY,
    });
  };
  
  const stopBottomPanelResizing = () => {
    setIsBottomPanelresizing(false);
  };
  
  const toggleBottomPanel = () => {
    if (BottomPanelheight <= minBottomPanelheight) {
      setBottomPanelheight(300); // Set the desired maximum height when expanded
    } else {
      setBottomPanelheight(minBottomPanelheight); // Set the minimum height when collapsed
    }
  };

   
  const toggleBottomPanelclose = () => {
    if (BottomPanelheight > minBottomPanelheight) {
      // If the sidebar is at the minimum width, expand it
      setBottomPanelheight(50); // Set the desired width when expanded
    } else {
        setIsBottomPanelresizing(isBottomPanelresizing);
    }
}
  

 const resize = React.useCallback(
  (mouseMoveEvent) => {
   if (isResizing) {
    const newWidth =
     mouseMoveEvent.clientX -
     sidebarRef.current.getBoundingClientRect().left;
    setSidebarWidth(newWidth);
    
   }
  },
  [isResizing]
 );

 const costresize = (mouseMoveEvent) => {
  if (isCostPanelresizing.resizing) {
    const mouseX = mouseMoveEvent.clientX;
    const initialX = isCostPanelresizing.initialX;
    const deltaX = mouseX - initialX;

    let newWidth = costPanelWidth - deltaX;

    // Ensure the new width doesn't go below the minimum or above the maximum
    newWidth = Math.max(minCostPanelWidth, newWidth);
    newWidth = Math.min(300, newWidth);

    setCostPanelWidth(newWidth);
    isCostPanelresizing.initialX = mouseX;
  }
};


  const bottomresize = (mouseMoveEvent) => {
    if (isBottomPanelresizing) {
      const mouseX = mouseMoveEvent.clientX;
      const initialX = isBottomPanelresizing.mouseX;
      const deltaX = mouseX - initialX;

      let newWidth = isBottomPanelresizing.initialWidth + deltaX;

      // Ensure the new width doesn't go below the minimum or above the maximum
      newWidth = Math.max(minBottomPanelheight, newWidth);
      newWidth = Math.min(200, newWidth); // Set the maximum width as needed

      setBottomPanelheight(newWidth);
    }
  };
  
  
  
  
  
  

 

 

 
 
 
 

 React.useEffect(() => {
  window.addEventListener("mousemove", resize);
  window.addEventListener("mouseup", stopResizing);
  return () => {
   window.removeEventListener("mousemove", resize);
   window.removeEventListener("mouseup", stopResizing);
  };
 }, [resize, stopResizing]);

 
 React.useEffect(() => {
  window.addEventListener("mousemove", costresize);
  window.addEventListener("mouseup", stopCostPanelResizing);
  return () => {
   window.removeEventListener("mousemove",costresize);
   window.removeEventListener("mouseup", stopCostPanelResizing);
  };
 }, [costresize, stopCostPanelResizing]);



 return (
   <div className="app-container">
     <DndProvider backend={HTML5Backend}>
   <div
    ref={sidebarRef}
    className={`app-sidebar ${isCollapsed?'collapsed':``}`}
    style={{ width: sidebarWidth }}
    onMouseDown={(e) => e.preventDefault()}
   >
    <div className="app-sidebar-content">
     <div
      className='logotext'
      style={{ textAlign: 'center', marginLeft: sidebarWidth > minSidebarWidthWithText ? "6px" : "10px" }}
     >
      {sidebarWidth > minSidebarWidthWithText || isResizing || isCollapsed? (
        <div>
       <div
        className="heading-box mt-1"
        style={{
         display: 'flex',
         alignItems: 'center',
         width: { sidebarWidth },
         position: "relative",
         background: "linear-gradient(90deg,rgb(50,30,100) 20%,rgb(0,0,0) 100%",
        }}
       >
        <MenuIcon style={{ marginRight: '10px', color: "white" }} onClick={togglesidePanelclose}/>
        <h6 className="mt-2" style={{ marginLeft: "10px", color: "White" }}>Price Model</h6>
       </div>

       <div className="sidebar-elements">
  {sidebarElements.map((element) => (
    <DraggableSidebarElement key={element} name={element} />
  ))}
</div>
      </div>

      ) : (
       <MenuIcon onClick={togglesidePanel}/>)
      }


     </div>
    
     
     
    </div>
    <div className="app-sidebar-resizer" onMouseDown={startResizing} />
   </div>
   
   <div className="app-frame">
   <div  className="centered-text">
         <h1>Price Model-Workbench</h1>
         </div>
       <div  className='tree'>
      <ul>
        <li> 
          <div style={boxStyle} className='centered-text'><h5>Price Model Header/ Total Invoice Price </h5></div>
        
        <ul>
        
          <li> <div style={boxStyle} >Total material</div>
            <ul>
              <li><div style={boxStyle} > Raw material</div></li>
              <li><div style={boxStyle}>Packaging</div></li>
            </ul>
          </li>
          <li> <div style={boxStyle}>Conversion and Fees</div>
            <ul>
              <li><div style={boxStyle}> Manufacturing</div></li>
              <li><div style={boxStyle}> Labor</div></li>
              <li><div style={boxStyle}> Fees</div></li>
            </ul>
          </li>
          <li> <div style={boxStyle}>Logistics</div> 
            <ul>
              <li><div style={boxStyle}> Transportation</div></li>
              <li><div style={boxStyle}>Warehousing</div></li>
            </ul>
          </li>
         
         
        </ul>
        </li>
        </ul>
       </div>
      
    {isBottomSidebarOpen&&(
 
    <div
        ref={bottomsidebarRef}
        className={`bottom-app-sidebar vertical ${isCollapsed ? 'collapsed' : ''}`}
        style={{ height: BottomPanelheight}}
        onMouseDown={(e) => e.preventDefault()}
      >
        
       
        <div className="bottom-app-sidebar-content" style={{disply:"flex"}}>
          <div className='bottom-box' style={{height:"30px",display:"flex"}} ref={bottomsidebarRef}>
            <h6 style={{color:"white"}}  onClick={showFormulaBar}>Formula Bar</h6>
            <h6 style={{color:"white",marginLeft:"20px"}}  onClick={showReference}>Reference Material</h6>
            <CloseIcon className="close-icon" style={{marginLeft: sidebarWidth, marginRight:costPanelWidth+20}} onClick={closeBottomSidebar} />

            </div>

            {isFormulaBarVisible && (
        <div className="text-center mt-1">
          <h6 style={{ alignItems: "center", color: "black" }}>Formula Bar</h6>
          <h6>
            <i>ability to modify formula of child elements</i>
          </h6>
          <h6>Raw Materials = Sum of (Feedstock 1, Feedstock 2, ...)</h6>
        </div>
      )}

        {isReferenceVisible&&(<div className='text-center mt-1'> <h6 style={{alighItem:"center",color: "black"}} >
            Reference Material(92154554)
           </h6>
           <h6>
           <i>slow current calculation based on selected element</i> 
           </h6>
           <h6>Raw Material Cost=Sum of(Feedstock 1(3.5), Feedstock 2(5.0))</h6>
           </div>)}
           

         
        </div>
      </div>
      )}
      </div>
   
     


      <div
  ref={costsidebarRef}
  className="right-app-sidebar"
  style={{
    width: costPanelWidth,
    
  }}
  onMouseDown={(e) => e.preventDefault()}
>
  <div className="right-app-sidebar-resizer" onMouseDown={startCostPanelResizing} />
  
  <div className="right-app-sidebar-content">
    <div
      className='logotext'
      style={{ textAlign: 'center', marginLeft: costPanelWidth > minCostPanelWidth ? "6px" : "10px" }}
    >
      {costPanelWidth > minCostPanelWidth || isCostPanelresizing ? (
        <div
          className="right-heading-box mt-1"
          style={{
            display: 'flex',
            alignItems: 'center',
            width: costPanelWidth,
            position: "relative",
            background: "linear-gradient(90deg,rgb(50,30,100) 20%,rgb(0,0,0) 100%",
          }}
        >
          <MenuIcon style={{ marginRight: '10px', color: "white" }} onClick={togglecostPanelclose} />
          <h6 className="mt-2" style={{ marginLeft: "10px", color: "White" }}>Costing Panel</h6>
        </div>
      ) : (
        <MenuIcon onClick={toggleCostPanel} />
      )}
    </div>
  </div>
</div>
</DndProvider>

  
   
  
    


  
   </div>
  
 );
}

export default Pricemodel;


body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.app-container {
  min-height: 100vh;
  padding: 1rem;

  display: flex;
  flex-direction: row;
  height: 100vh;

}
.container{
  min-height: 100vh;

 
  height: 100vh;

}
.app-sidebar {
  flex-grow: 0;
  flex-shrink: 0;
  min-width: 50px;
  max-width: 300px;
  display: flex;
  border-right: 1px solid #e9e9e9;
  flex-direction: row;
  background: #ffffff;
  box-shadow: -8px 2px 22px -7px rgba(0, 0, 0, 0.25);
  border-radius: 10px 0px 0px 10px;
  z-index: 2;
  overflow: hidden;
  position: "relative"
}

.app-frame {
  flex: 1;
  display: flex;
  flex-direction: column;
  background: white;
  height: 100vh;
  max-height: 100%;
  background: #ffffff;
  box-shadow: 8px 2px 32px -2px rgba(0, 0, 0, 0.25);
 
  z-index: 1;
}

.app-sidebar .app-sidebar-content {
  flex: 1;
  overflow: hidden;
  position: "relative";
  align-items: "center";
margin-left: "20px";
}

.app-sidebar .app-sidebar-resizer {
  flex-grow: 0;
  flex-shrink: 0;
  flex-basis: 6px;
  justify-self: flex-end;
  cursor: col-resize;
  resize: horizontal;
  overflow: hidden;
  position: "relative"
}

.app-sidebar .app-sidebar-resizer:hover {
  width: 3px;
  background: #c1c3c5b4;
  overflow: hidden;
  position: "relative"
}

.heading-box {
  background-color: #f2f2f2;
  padding: 8px;
  overflow: hidden;
  height:"10px";
  width:"100px"
 }

.boxContainerRef {
  position: absolute;
  left: 261px;
  width: calc(100% - 261px);
  max-width: 100%;
}
.right-app-sidebar {
  flex-grow: 0;
  flex-shrink: 0;
  min-width: 50px;
  max-width: 300px;
  display: flex;
  border-right: 1px solid #e9e9e9;
  flex-direction: row;
  background: #ffffff;
  box-shadow: -8px 2px 22px -7px rgba(0, 0, 0, 0.25);
  border-radius: 0px 10px 10px 0px;
  z-index: 2;
  overflow: hidden;
  padding-right: 20px;
 
}

.right-app-sidebar .right-app-sidebar-content {
  flex: 1;
  overflow: hidden;
  position: "relative"
}

.right-app-sidebar .right-app-sidebar-resizer {
  flex-grow: 0;
  flex-shrink: 0;
  flex-basis: 6px;
  justify-self: flex-end;
  cursor: col-resize;
  resize: horizontal;
  overflow: hidden;
  position: "relative"
  
}

.right-app-sidebar .right-app-sidebar-resizer:hover {
  width: 3px;
  background: #c1c3c5b4;
  
  
}
.right-heading-box {
  background-color: #f2f2f2;
  padding: 8px;
  overflow: hidden;
  height:"10px";
  width:"100px"
 }

 .bottom-app-sidebar {
  flex-grow: 1; /* Grow horizontally */
  flex-shrink: 0;
  min-height: 50px; /* Adjust the height as needed */
  max-height: 200px; /* Adjust the maximum height as needed */
  
  flex-direction: row; /* Set the direction to horizontal */
  background: #ffffff;
  box-shadow: 2px 8px 22px -7px rgba(0, 0, 0, 0.25); 
  border-radius: 0px 0px 0px 0px;/* Update shadow */
 
 
  overflow: hidden;
  position: "relative";
  margin-top: 200px;
  background-color: cadetblue;
}

.bottom-app-sidebar .bottom-app-sidebar-content {
  flex: 1;
 

  overflow: hidden;
  position: "relative";
 
}

.bottom-app-sidebar .bottom-app-sidebar-resizer {
  flex-grow: 0;
  flex-shrink: 0;
  flex-basis: 6px;
  cursor: ew-resize; /* Set cursor to "ew-resize" for horizontal resizing */
  overflow: hidden;
  position: relative;
}





.bottom-right-app-sidebar .bottom-right-app-sidebar-resizer:hover {
  width: 3px;
  background: #c1c3c5b4;
  
  
}

.bottom-box {
  background-color: #0e0d0d;
  padding: 4px;
  overflow: hidden;
  
  
 
 }







 




.bottom-app-sidebar .bottom-app-sidebar-resizer:hover {
  width: 3px;
  background: #c1c3c5b4;
  
  
}
.close-icon {
  color: white;
  /* Add the following styles to adjust its position */
  position: absolute;
  right: 10px; /* Set the initial position */
  transition: right 0.3s; /* Add a transition for smooth movement */
}

.sidebar-elements {
  padding: 10px 10px; /* Adjust the padding as needed */
  
}

/* CSS for the individual sidebar element boxes */
.sidebar-element {
  background-color: #f0f0f0; /* Background color of the boxes */
  border: 1px solid #ccc; /* Border style */
  padding: 5px; /* Padding inside the boxes */
  margin: 5px 5px; /* Margin between boxes */
  cursor: move; /* Change cursor to pointer when hovering over boxes */
  border-radius: 5px; /* Add some border radius for rounded corners */
  transition: background-color 0.3s; /* Smooth background color transition on hover */
  display: inline-block;
  /* Reduce the width to 150px */
  width: 120px;
 


  /* Text style inside the boxes */
  color: #333; /* Text color */
  font-weight: bold; /* Text font weight */
  text-align: center; /* Center text horizontally */
}



/* CSS for hover effect on the boxes */
.sidebar-element:hover {
  background-color: #ddd; /* Background color on hover */
}
.sidebar-element:active {
  cursor: grabbing;
}

import React,{ useState } from 'react';

import './App.css';

import { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';

 

const initialItems = [

 {id: 'item-1', content:'Item 1' },

 {id: 'item-2', content:'Item 2' },

 {id: 'item-3', content:'Item 3' },

 // add more items if needed

];

 

const initialTables = {

 table1: [],

 table2: [],

};

 

function App() {

 const [items, setItems] = useState(initialItems);

 const [tables,setTables] = useState(initialTables);

 

 const onDragEnd = (result) => {

   if (!result.destination) return;

 

   const { source, destination } = result;

   const draggedItem = items.find((item) => item.id === result.draggable.Id);

   if (source.droppableId === destination.droppableId){

     //reordering within same list

     const newItems =[...items];

     newItems.splice(source.index, 1);

     newItems.splice(destination.index,0,draggedItem);

     setItems(newItems);

 

   } else {

     //moving from one table to another

     const newTables = { ...tables };

     newTables[destination.droppableId] = [

       ...tables[destination.droppableId],

       draggedItem,

     ];

     setTables(newTables);

 

   }

 };

 return(

   <div className="App">

     <h1> Drag and Drop example</h1>

     <div className="container">

       <Droppable droppableId="items" direction= "vertical">

         {(provided)=>(

           <div

           ref={provided.innerRef}

           {...provided.droppableProps}

           className="items-list"

           >

             {items.map((item, index)=>(

               <Draggable key={item.id} draggableId={item.id} index={index}>

                 {(provided)=> (

                   <div

                   ref={provided.innerRef}

                   {...provided.draggableProps}

                   {...provided.dragHandleProps}

                   className="item"

                   >

                     {item.content}

                   </div>

                 )}

               </Draggable>

             ))}

             {provided.placeholder}

             </div>

         )}

       </Droppable>

     <div className="tables">

       <Droppable droppableId="table1" direction="vertical">

         {(provided) => (

           <div

           ref={provided.innerRef}

           {...provided.droppableProps}

           className="table"

           >

             <h2> Table 1</h2>

             {tables.table1.map((item, index)=>(

               <div key={item.id} className="table-item">

                 {item.content}

                 </div>

             ))}

             {provided.placeholder}

           </div>

         )}

       </Droppable>

       <Droppable droppableId="table2" direction="vertical">

         {(provided) => (

           <div

           ref={provided.innerRef}

           {...provided.droppableProps}

           className="table"

           >

             <h2> Table 2</h2>

             {tables.table2.map((item, index)=>(

               <div key={item.id} className="table-item">

                 {item.content}

                 </div>

             ))}

             {provided.placeholder}

           </div>

         )}

       </Droppable> 

       </div>

       </div>

       <DragDropContext onDragEnd={onDragEnd}></DragDropContext>

       </div>

 );

             }

export default App;import React,{ useState } from 'react';

import './App.css';

import { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';

 

const initialItems = [

 {id: 'item-1', content:'Item 1' },

 {id: 'item-2', content:'Item 2' },

 {id: 'item-3', content:'Item 3' },

 // add more items if needed

];

 

const initialTables = {

 table1: [],

 table2: [],

};

 

function App() {

 const [items, setItems] = useState(initialItems);

 const [tables,setTables] = useState(initialTables);

 

 const onDragEnd = (result) => {

   if (!result.destination) return;

 

   const { source, destination } = result;

   const draggedItem = items.find((item) => item.id === result.draggable.Id);

   if (source.droppableId === destination.droppableId){

     //reordering within same list

     const newItems =[...items];

     newItems.splice(source.index, 1);

     newItems.splice(destination.index,0,draggedItem);

     setItems(newItems);

 

   } else {

     //moving from one table to another

     const newTables = { ...tables };

     newTables[destination.droppableId] = [

       ...tables[destination.droppableId],

       draggedItem,

     ];

     setTables(newTables);

 

   }

 };

 return(

   <div className="App">

     <h1> Drag and Drop example</h1>

     <div className="container">

       <Droppable droppableId="items" direction= "vertical">

         {(provided)=>(

           <div

           ref={provided.innerRef}

           {...provided.droppableProps}

           className="items-list"

           >

             {items.map((item, index)=>(

               <Draggable key={item.id} draggableId={item.id} index={index}>

                 {(provided)=> (

                   <div

                   ref={provided.innerRef}

                   {...provided.draggableProps}

                   {...provided.dragHandleProps}

                   className="item"

                   >

                     {item.content}

                   </div>

                 )}

               </Draggable>

             ))}

             {provided.placeholder}

             </div>

         )}

       </Droppable>

     <div className="tables">

       <Droppable droppableId="table1" direction="vertical">

         {(provided) => (

           <div

           ref={provided.innerRef}

           {...provided.droppableProps}

           className="table"

           >

             <h2> Table 1</h2>

             {tables.table1.map((item, index)=>(

               <div key={item.id} className="table-item">

                 {item.content}

                 </div>

             ))}

             {provided.placeholder}

           </div>

         )}

       </Droppable>

       <Droppable droppableId="table2" direction="vertical">

         {(provided) => (

           <div

           ref={provided.innerRef}

           {...provided.droppableProps}

           className="table"

           >

             <h2> Table 2</h2>

             {tables.table2.map((item, index)=>(

               <div key={item.id} className="table-item">

                 {item.content}

                 </div>

             ))}

             {provided.placeholder}

           </div>

         )}

       </Droppable> 

       </div>

       </div>

       <DragDropContext onDragEnd={onDragEnd}></DragDropContext>

       </div>

 );

             }

export default App;import React,{ useState } from 'react';

import './App.css';

import { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';

 

const initialItems = [

 {id: 'item-1', content:'Item 1' },

 {id: 'item-2', content:'Item 2' },

 {id: 'item-3', content:'Item 3' },

 // add more items if needed

];

 

const initialTables = {

 table1: [],

 table2: [],

};

 

function App() {

 const [items, setItems] = useState(initialItems);

 const [tables,setTables] = useState(initialTables);

 

 const onDragEnd = (result) => {

   if (!result.destination) return;

 

   const { source, destination } = result;

   const draggedItem = items.find((item) => item.id === result.draggable.Id);

   if (source.droppableId === destination.droppableId){

     //reordering within same list

     const newItems =[...items];

     newItems.splice(source.index, 1);

     newItems.splice(destination.index,0,draggedItem);

     setItems(newItems);

 

   } else {

     //moving from one table to another

     const newTables = { ...tables };

     newTables[destination.droppableId] = [

       ...tables[destination.droppableId],

       draggedItem,

     ];

     setTables(newTables);

 

   }

 };

 return(

   <div className="App">

     <h1> Drag and Drop example</h1>

     <div className="container">

       <Droppable droppableId="items" direction= "vertical">

         {(provided)=>(

           <div

           ref={provided.innerRef}

           {...provided.droppableProps}

           className="items-list"

           >

             {items.map((item, index)=>(

               <Draggable key={item.id} draggableId={item.id} index={index}>

                 {(provided)=> (

                   <div

                   ref={provided.innerRef}

                   {...provided.draggableProps}

                   {...provided.dragHandleProps}

                   className="item"

                   >

                     {item.content}

                   </div>

                 )}

               </Draggable>

             ))}

             {provided.placeholder}

             </div>

         )}

       </Droppable>

     <div className="tables">

       <Droppable droppableId="table1" direction="vertical">

         {(provided) => (

           <div

           ref={provided.innerRef}

           {...provided.droppableProps}

           className="table"

           >

             <h2> Table 1</h2>

             {tables.table1.map((item, index)=>(

               <div key={item.id} className="table-item">

                 {item.content}

                 </div>

             ))}

             {provided.placeholder}

           </div>

         )}

       </Droppable>

       <Droppable droppableId="table2" direction="vertical">

         {(provided) => (

           <div

           ref={provided.innerRef}

           {...provided.droppableProps}

           className="table"

           >

             <h2> Table 2</h2>

             {tables.table2.map((item, index)=>(

               <div key={item.id} className="table-item">

                 {item.content}

                 </div>

             ))}

             {provided.placeholder}

           </div>

         )}

       </Droppable> 

       </div>

       </div>

       <DragDropContext onDragEnd={onDragEnd}></DragDropContext>

       </div>

 );

             }

export default App;


