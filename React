import React, { useState, useRef, useCallback } from 'react';
import "../index.css";
import "./tree.css"
import MenuIcon from '@mui/icons-material/Menu';
import ArrowForwardIcon from '@mui/icons-material/ArrowForward';
import CloseIcon from '@mui/icons-material/Close';
import { CardContent } from '@mui/material';
import { FlareSharp } from '@mui/icons-material';
import { DndProvider, useDrag, useDrop } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';

function Elements({id,element}){
  const [{isDragging},drag]=useDrag(()=>({
      type:"elements",
      item: { id },
      collect:(monitor)=>({
          isDragging:monitor.isDragging(),
      }),
      onDragStart:(e)=>{
        e.preventDefault();
        e.stopPropagation();
    },
  }));
  return(
      <div className="sidebar-element"
      ref={drag}  style={{opacity: isDragging ? 0.5 : 1 }}>
    
          {element}

      </div>
  )
}







function Pricemodel() {
  const boxStyle = {
    border: '1px solid #000', // Add a border around the text
    padding: '2px', // Add some padding for spacing
    display: 'inline-block',
     
    // Make sure the box doesn't take the full width
  };
  const sidebarElements = [
    {id:1,
    element:"Materials"
    },
    {id:2,
        element:"Feedstock"
        },
        {id:3,
            element:"Feedstock"
            },
            {id:4,
                element: "Fees"
                },
                {id:5,
                    element:"Conversion"
                    } ,
                    {id:6,
                        element: "Equipment",
                        },
                         {id:7,
                            element:"Energy"
                            } ,
                            {id:8,
                                element:"Logistics"
                                },
                                {id:9,
                                    element:"Lane"
                                    },
                                    {id:10,
                                        element:"Warehousing"
                                        },
                                    ];
 const sidebarRef = useRef(null);
 const boxContainerRef = useRef(null); // Added ref for the box container
 const [isResizing, setIsResizing] = useState(false);
 const [sidebarWidth, setSidebarWidth] = useState(261);

 const costsidebarRef = useRef(null);
 const minSidebarWidthWithText = 100;
 const [isCostPanelresizing, setIsCostPanelresizing] = useState({ resizing: false, initialX: 0 });

 const [costPanelWidth, setCostPanelWidth] = useState(261);
 const minCostPanelWidth = 50;

 const bottomsidebarRef = useRef(null);
 
 
 const [isBottomPanelresizing, setIsBottomPanelresizing] = useState(false);
 const [BottomPanelheight, setBottomPanelheight] = useState(145); // Corrected variable name
 const minBottomPanelheight = 100; // Corrected variable name
 const [isCollapsed,setIsCollapsed]=useState(false);
 const [isFormulaBarVisible, setFormulaBarVisible] = useState(false);
 const [isReferenceVisible, setReferenceVisible] = useState(false);
 const [isBottomSidebarOpen, setBottomSidebarOpen] = useState(true);
 const [isOpen,setIsOpen]=useState(true);
 
const [isDragging, setIsDragging] = useState(false);
const [initialMouseY, setInitialMouseY] = useState(0);
const [bottomPanelY, setBottomPanelY] = useState(0);

const startDragging = (e) => {
  setIsDragging(true);
  setInitialMouseY(e.clientY);
};



 const showFormulaBar = () => {
  setFormulaBarVisible(true);
  setReferenceVisible(false);
  setBottomSidebarOpen(true);
};

const showReference = () => {
  setFormulaBarVisible(false);
  setReferenceVisible(true);
  setBottomSidebarOpen(true);
};

const closeBottomSidebar = () => {
  setBottomSidebarOpen(false);
};
const openbottombar=()=>{
  setIsOpen(true);
}
 
 
 const startResizing = React.useCallback((mouseDownEvent) => {
  setIsResizing(true);
 }, []);

 const startCostPanelResizing = (mouseDownEvent) => {
  setIsCostPanelresizing({
    resizing: true,
    initialX: mouseDownEvent.clientX,
  });
};

 const stopResizing = React.useCallback(() => {
  setIsResizing(false);
 }, []);

 const stopCostPanelResizing = () => {
  setIsCostPanelresizing( false);
};


 const togglesidePanel = () => {
    if (sidebarWidth <= minSidebarWidthWithText) {
      // If the sidebar is at the minimum width, expand it
      setSidebarWidth(261); // Set the desired width when expanded
    } else {
      setIsCollapsed(!isCollapsed);
    }
  };
  const togglesidePanelclose = () => {
    if (sidebarWidth > minSidebarWidthWithText) {
      // If the sidebar is at the minimum width, expand it
      setSidebarWidth(50); // Set the desired width when expanded
    } else {
      setIsCollapsed(isCollapsed);
    }
  };
  const toggleCostPanel = () => {
    if (costPanelWidth <= minCostPanelWidth) {
      // If the cost sidebar is at the minimum width, expand it
      setCostPanelWidth(300); // Set the desired width when expanded
    } else {
      setIsCostPanelresizing(!isCostPanelresizing);
    }
  };
  const togglecostPanelclose = () => {
    if (costPanelWidth > minCostPanelWidth) {
      // If the sidebar is at the minimum width, expand it
      setCostPanelWidth(50); // Set the desired width when expanded
    } else {
        setIsCostPanelresizing(isCostPanelresizing);
    }
}

const startBottomPanelResizing = (mouseDownEvent) => {
    setIsBottomPanelresizing({
      initialHeight: BottomPanelheight,
      mouseY: mouseDownEvent.clientY,
    });
  };
  
  const stopBottomPanelResizing = () => {
    setIsBottomPanelresizing(false);
  };
  
  const toggleBottomPanel = () => {
    if (BottomPanelheight <= minBottomPanelheight) {
      setBottomPanelheight(300); // Set the desired maximum height when expanded
    } else {
      setBottomPanelheight(minBottomPanelheight); // Set the minimum height when collapsed
    }
  };

   
  const toggleBottomPanelclose = () => {
    if (BottomPanelheight > minBottomPanelheight) {
      // If the sidebar is at the minimum width, expand it
      setBottomPanelheight(50); // Set the desired width when expanded
    } else {
        setIsBottomPanelresizing(isBottomPanelresizing);
    }
}
  

 const resize = React.useCallback(
  (mouseMoveEvent) => {
   if (isResizing) {
    const newWidth =
     mouseMoveEvent.clientX -
     sidebarRef.current.getBoundingClientRect().left;
    setSidebarWidth(newWidth);
    
   }
  },
  [isResizing]
 );

 const costresize = (mouseMoveEvent) => {
  if (isCostPanelresizing.resizing) {
    const mouseX = mouseMoveEvent.clientX;
    const initialX = isCostPanelresizing.initialX;
    const deltaX = mouseX - initialX;

    let newWidth = costPanelWidth - deltaX;

    // Ensure the new width doesn't go below the minimum or above the maximum
    // newWidth = Math.max(minCostPanelWidth, newWidth);
    // newWidth = Math.min(300, newWidth);

    setCostPanelWidth(newWidth);
    isCostPanelresizing.initialX = mouseX;
  }
};


  const bottomresize = (mouseMoveEvent) => {
    if (isBottomPanelresizing) {
      const mouseX = mouseMoveEvent.clientX;
      const initialX = isBottomPanelresizing.mouseX;
      const deltaX = mouseX - initialX;

      let newWidth = isBottomPanelresizing.initialWidth + deltaX;

      // Ensure the new width doesn't go below the minimum or above the maximum
      newWidth = Math.max(minBottomPanelheight, newWidth);
      newWidth = Math.min(200, newWidth); // Set the maximum width as needed

      setBottomPanelheight(newWidth);
    }
  };
  
  
  
  
  
  

 

 

 
 
 
 

 React.useEffect(() => {
  window.addEventListener("mousemove", resize);
  window.addEventListener("mouseup", stopResizing);
  return () => {
   window.removeEventListener("mousemove", resize);
   window.removeEventListener("mouseup", stopResizing);
  };
 }, [resize, stopResizing]);

 
 React.useEffect(() => {
  window.addEventListener("mousemove", costresize);
  window.addEventListener("mouseup", stopCostPanelResizing);
  return () => {
   window.removeEventListener("mousemove",costresize);
   window.removeEventListener("mouseup", stopCostPanelResizing);
  };
 }, [costresize, stopCostPanelResizing]);

 React.useEffect(() => {
  window.addEventListener("mousemove",  bottomresize);
  window.addEventListener("mouseup", stopBottomPanelResizing);
  return () => {
    window.removeEventListener("mousemove",  bottomresize);
    window.removeEventListener("mouseup", stopBottomPanelResizing);
  };
}, [bottomresize, stopBottomPanelResizing]);

React.useEffect(() => {
  window.addEventListener('mouseup', () => setIsDragging(false));
  return () => window.removeEventListener('mouseup', () => setIsDragging(false));
}, []);



 return (
   <div className="app-container">
     
   <div
    ref={sidebarRef}
    className={`app-sidebar ${isCollapsed?'collapsed':``}`}
    style={{ width: sidebarWidth }}
    onMouseDown={(e) => e.preventDefault()}
   >
    <div className="app-sidebar-content">
     <div
      className='logotext'
      style={{ textAlign: 'center', marginLeft: sidebarWidth > minSidebarWidthWithText ? "6px" : "10px" }}
     >
      {sidebarWidth > minSidebarWidthWithText || isResizing || isCollapsed? (
        <div>
       <div
        className="heading-box mt-1"
        style={{
         display: 'flex',
         alignItems: 'center',
         width: { sidebarWidth },
         position: "relative",
         background: "linear-gradient(90deg,rgb(50,30,100) 20%,rgb(0,0,0) 100%",
        }}
       >
        <MenuIcon style={{ marginRight: '10px', color: "white" }} onClick={togglesidePanelclose}/>
        <h6 className="mt-2" style={{ marginLeft: "10px", color: "White" }}>Price Model</h6>
       </div>
      
       
      


     
    

      </div>

      ) : (
       <MenuIcon onClick={togglesidePanel}/>)
      }


     </div>
     <div className="sidebar-elements">
        {sidebarElements.map((elementname) => {
          return  (
            <Elements element={elementname.element} id={elementname.id}/>)

        })}
        </div>
    
     
     
    </div>
    <div className="app-sidebar-resizer" onMouseDown={startResizing} />
   </div>
   
   <div className="app-frame">
   
      
    {isBottomSidebarOpen&&(
 
    <div
        ref={bottomsidebarRef}
        className={`bottom-app-sidebar vertical ${isCollapsed ? 'collapsed' : ''}`}
        style={{ height: BottomPanelheight}}
        onMouseDown={(e) => {
          e.preventDefault();
          startDragging(e);
        }}
        onMouseMove={(e) => {
          if (isDragging) {
            setBottomPanelY(e.clientY - initialMouseY);
          }}}
       
      >
        
       
        <div className="bottom-app-sidebar-content" style={{disply:"flex"}}>
        <div className="bottom-app-sidebar-resizer" onMouseDown={startBottomPanelResizing} />
          <div className='bottom-box' style={{height:"30px",display:"flex"}} ref={bottomsidebarRef}>
            <h6 style={{color:"white"}}  onClick={showFormulaBar}>Formula Bar</h6>
            <h6 style={{color:"white",marginLeft:"20px"}}  onClick={showReference}>Reference Material</h6>
            <CloseIcon className="close-icon" style={{marginLeft: sidebarWidth, marginRight:costPanelWidth}} onClick={closeBottomSidebar} />

            </div>

            {isFormulaBarVisible && (
        <div className="text-center mt-1">
          <h6 style={{ alignItems: "center", color: "black" }}>Formula Bar</h6>
          <h6>
            <i>ability to modify formula of child elements</i>
          </h6>
          <h6>Raw Materials = Sum of (Feedstock 1, Feedstock 2, ...)</h6>
        </div>
      )}

        {isReferenceVisible&&(<div className='text-center mt-1'> <h6 style={{alighItem:"center",color: "black"}} >
            Reference Material(92154554)
           </h6>
           <h6>
           <i>slow current calculation based on selected element</i> 
           </h6>
           <h6>Raw Material Cost=Sum of(Feedstock 1(3.5), Feedstock 2(5.0))</h6>
           </div>)}
           

         
        </div>
      </div>
      )}
      

      </div>
   
     


      <div
  ref={costsidebarRef}
  className="right-app-sidebar"
  style={{
    width: costPanelWidth,
    
  }}
  onMouseDown={(e) => e.preventDefault()}
>
  <div className="right-app-sidebar-resizer" onMouseDown={startCostPanelResizing} />
  
  <div className="right-app-sidebar-content">
    <div
      className='logotext'
      style={{ textAlign: 'center', marginLeft: costPanelWidth > minCostPanelWidth ? "6px" : "10px" }}
    >
      {costPanelWidth > minCostPanelWidth || isCostPanelresizing ? (
        <div
          className="right-heading-box mt-1"
          style={{
            display: 'flex',
            alignItems: 'center',
            width: costPanelWidth,
            position: "relative",
            background: "linear-gradient(90deg,rgb(50,30,100) 20%,rgb(0,0,0) 100%",
          }}
        >
          <MenuIcon style={{ marginRight: '10px', color: "white" }} onClick={togglecostPanelclose} />
          <h6 className="mt-2" style={{ marginLeft: "10px", color: "White" }}>Costing Panel</h6>
        </div>
      ) : (
        <MenuIcon onClick={toggleCostPanel} />
      )}
    </div>
  </div>
</div>


  
   
  
    


  
   </div>
  
 );
}

export default Pricemodel;
