Cannot read properties of null (reading 'removeEventListener')
TypeError: Cannot read properties of null (reading 'removeEventListener')
    at http://localhost:3001/static/js/bundle.js:1249:28
    at safelyCallDestroy (http://localhost:3001/static/js/bundle.js:40764:9)
    at commitHookEffectListUnmount (http://localhost:3001/static/js/bundle.js:40902:15)
    at invokePassiveEffectUnmountInDEV (http://localhost:3001/static/js/bundle.js:42678:17)
    at invokeEffectsInDev (http://localhost:3001/static/js/bundle.js:44531:15)
    at commitDoubleInvokeEffectsInDEV (http://localhost:3001/static/js/bundle.js:44510:11)
    at flushPassiveEffectsImpl (http://localhost:3001/static/js/bundle.js:44287:9)
    at flushPassiveEffects (http://localhost:3001/static/js/bundle.js:44225:18)
    at commitRootImpl (http://localhost:3001/static/js/bundle.js:44184:9)
    at commitRoot (http://localhost:3001/static/js/bundle.js:43967:9)

import React, { useState, useRef, useCallback } from 'react';
import ReactFlow, {
  ReactFlowProvider,
  addEdge,
  useNodesState,
  useEdgesState,
  Controls,
} from 'reactflow';
import 'reactflow/dist/style.css';

import Sidebar from './Sidebar';
import Costpanel from './costpanel';
import Formulabar from "./formulabar"

import './index.css';

const initialNodes = [
  {
    id: '1',
    type: 'input',
    data: { label: 'Price Model'},
    position: { x: 250, y: 5 },
  },
  
];
const nodesdata=[
  
  { label: 'Price Model',value:42 },
 {label:'Total Materials',value:43},
  {label:'Logistics',value:44},
  
]

let id = 0;
const getId = () => `dndnode_${id++}`;



const DnDFlow = () => {
  const reactFlowWrapper = useRef(null);
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const[nodedata,setNodedata]=useState(nodesdata)
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  const [reactFlowInstance, setReactFlowInstance] = useState(null);
  const [values,setValues] = useState();
  const [formulaBarVisible, setFormulaBarVisible] = useState(false);
  
  
 
  
  const [sidebarWidth, setSidebarWidth] = useState(200);
  const [costPanelWidth, setCostPanelWidth] = useState(322);
   
  
  
  const updateCenterContentMargin=(newWidth)=>{
    const margin=300-newWidth;
    reactFlowWrapper.current.style.marginLeft=`${margin}px`;
    setCostPanelWidth(margin);
    // setSidebarWidth(newWidth);
    // setCostPanelWidth(322-newWidth);
   
  }

  
  const handleNodeClick =  (event) => {
   
    var data;
  if(event.target.getAttribute('data-id')){
    
    const nodeText = event.target.innerText;
    
    const nodeWithMatchingLabel = nodedata.find((node) => node.label === nodeText);
    if(nodeWithMatchingLabel){
    data = nodeWithMatchingLabel.value;
      console.log("data",data)
       }
    setValues(data)
    setFormulaBarVisible(true)
      }
   
   
  };

  console.log('value',values)
   
  const closeBottomSidebar = () => {
    setFormulaBarVisible(false);
  }

  


  
  
 

  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), []);

  const onDragOver = useCallback((event) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';
  }, []);

  const onDrop = useCallback(
    (event) => {
      event.preventDefault();
      

      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();
      const type = event.dataTransfer.getData('application/reactflow');

      // check if the dropped element is valid
      if (typeof type === 'undefined' || !type) {
        return;
      }

      const position = reactFlowInstance.project({
        x: event.clientX - reactFlowBounds.left,
        y: event.clientY - reactFlowBounds.top,
      });
      const newNode = {
        id: getId(),
        type,
        position,
        data: { label: `${type} ` },
      };

      setNodes((nds) => nds.concat(newNode));
    },
    [reactFlowInstance]
  );
  const onNodeDragEnd = (event) => {
    const { nodes, edges } = event.data;
    const draggedNode = event.target;
   
    const connectedNode = nodes.find((node) => node !== draggedNode && node.position.x === draggedNode.position.x && node.position.y === draggedNode.position.y);
  
    if (connectedNode) {
      const edgeToRemove = edges.find((edge) => (edge.source === draggedNode.id && edge.target === connectedNode.id) || (edge.source === connectedNode.id && edge.target === draggedNode.id));
  
      if (edgeToRemove) {
        setEdges(edges.filter((edge) => edge !== edgeToRemove));
      }
    }
  };
 

  return (
   
    
    <div className="dndflow ">
       <ReactFlowProvider>
        <Sidebar/>
    
        
        
    
   <div className="reactflow-wrapper" ref={reactFlowWrapper} style={{ height:450}} >
    <ReactFlow
            nodes={nodes}
            
            edges={edges}
            onNodesChange={onNodesChange}
            onEdgesChange={onEdgesChange}
            onConnect={onConnect}
            onInit={setReactFlowInstance}
            onDrop={onDrop}
            onDragOver={onDragOver}
           onNodeDragEnd={onNodeDragEnd}
           onClick={handleNodeClick}
             fitView
          >
            <Controls />
           
           </ReactFlow>
           
           {formulaBarVisible&&(
   
   <Formulabar propsvalue={values} closeBottomSidebar={closeBottomSidebar} />

)}
          
          
          </div>
    
        

<Costpanel updateCenterContentMargin={updateCenterContentMargin}/>
         
         
 
          </ReactFlowProvider>
          
    
       </div>
      
      
  );
};

export default DnDFlow;
import React, { useState, useRef, useCallback } from 'react';
import "./index.css";

import MenuIcon from '@mui/icons-material/Menu';
function Costpanel({updateCenterContentMargin,propsvalue}) {
  
  
   
const costsidebarRef = useRef(null);
 
 const [isCostPanelresizing, setIsCostPanelresizing] = useState(false);

 const [costPanelWidth, setCostPanelWidth] = useState(322);
 const minCostPanelWidth = 50;


 
  const startCostPanelResizing = (mouseDownEvent) => {
  setIsCostPanelresizing({
    resizing: true,
    initialX: mouseDownEvent.clientX,
  });
};

 

 const stopCostPanelResizing = () => {
  setIsCostPanelresizing( false);
};



 
  const toggleCostPanel = () => {
    if (costPanelWidth <= minCostPanelWidth) {
      // If the cost sidebar is at the minimum width, expand it
      setCostPanelWidth(322);
     updateCenterContentMargin(300) // Set the desired width when expanded
    } else {
      setIsCostPanelresizing(!isCostPanelresizing);
       updateCenterContentMargin(50)
    }
   
   
   
  };
  const togglecostPanelclose = () => {
    if (costPanelWidth > minCostPanelWidth) {
      // If the sidebar is at the minimum width, expand it
      setCostPanelWidth(50);
       updateCenterContentMargin(50) // Set the desired width when expanded
    } else {
        setIsCostPanelresizing(isCostPanelresizing);
        updateCenterContentMargin(322)

    }
   
    
}


  

  



 const costresize = (mouseMoveEvent) => {
  if (isCostPanelresizing) {
    const mouseX = mouseMoveEvent.clientX;
    const initialX = isCostPanelresizing.initialX;
    const deltaX = mouseX - initialX;

    let newWidth = costPanelWidth- deltaX;
    
   
   

    // Ensure the new width doesn't go below the minimum or above the maximum
    newWidth = Math.max(minCostPanelWidth, newWidth);
   

    setCostPanelWidth(newWidth);
  
   updateCenterContentMargin(newWidth);
   isCostPanelresizing.initialX = mouseX;
  }
};
 React.useEffect(() => {
  window.addEventListener("mousemove", costresize);
  window.addEventListener("mouseup", stopCostPanelResizing);
  return () => {
   window.removeEventListener("mousemove",costresize);
   window.removeEventListener("mouseup", stopCostPanelResizing);
  };
 }, [costresize, stopCostPanelResizing]);
return (
  <div
  ref={costsidebarRef}
  className="right-app-sidebar"
  style={{
    width: costPanelWidth
    
  }}
  onMouseDown={(e) => e.preventDefault()}
>
  <div className="right-app-sidebar-resizer" onMouseDown={startCostPanelResizing} />
  
  <div className="right-app-sidebar-content">
    <div
      className='logotext'
      style={{ textAlign: 'center', marginLeft: costPanelWidth > minCostPanelWidth ? "6px" : "10px" }}
    >
      {costPanelWidth > minCostPanelWidth || isCostPanelresizing ? (
        <div>
        <div
          className="right-heading-box mt-3"
          style={{
            display: 'flex',
            alignItems: 'center',
            width:costPanelWidth,
            position: "relative",
            height:"30px",
           
           
          }}
        >
          <MenuIcon style={{ marginRight: '10px',color: "black" }} onClick={togglecostPanelclose} />
          <h5 className="mt-2" style={{ marginLeft: "10px", color: "black" }}>Costing Panel</h5>
          </div>
          <div>
          <table className="table table-bordered border border-black mt-3">
  <thead >
  <tr>
    <th>Feedstock ID</th>
    <th>Vendor ID</th>
    <th>Cost Per Unit</th>
    <th>Unit of Measure</th>
  </tr>
  </thead>
  <tr>
    <td>Feedstock 1</td>
    <td>03987</td>
    <td>9770990</td>
    <td>-997557</td>
  </tr>
  <tr>
    <td>Feedstock 2</td>
    <td>8768709</td>
    <td>057576</td>
    <td>098765687</td>
  </tr>
  <tr>
    <td>Feedstock 3</td>
    <td>098765</td>
    <td>4567</td>
    <td>48798</td>
  </tr>
  <tr>
    <td>Feedstock 4</td>
    <td>675475</td>
    <td>7865</td>
    <td>09875</td>
  </tr>
</table>

            </div>
            <div>
            <table className="table table-bordered border border-black">
  <thead>
  <tr>
    <th>Material ID</th>
    <th>Feedstock ID</th>
    <th>Usage</th>
    <th>Unit</th>
  </tr>
  </thead>
  <tr>
    <td>4556765</td>
    <td>Feedstock 1</td>
    <td>9770990</td>
    <td>Percent</td>
  </tr>
  <tr>
    <td>347654</td>
    <td>Feedstock 2</td>
    <td>4567765</td>
    <td>Percent</td>
  </tr>
  <tr>
    <td>234567</td>
    <td>Feedstock 3</td>
    <td>-0984567</td>
    <td>Percent</td>
  </tr>
  <tr>
    <td>56789</td>
    <td>Feedstock 4</td>
    <td>7865</td>
    <td>Percent</td>
  </tr>
</table>
                
                </div>
              
          </div>

          
        
      ) : (
        <MenuIcon onClick={toggleCostPanel} />
      )}
    </div>
  </div>
</div>
);
}

export default Costpanel;import React, { useState, useRef, useCallback } from 'react';
import "./index.css";

import CloseIcon from '@mui/icons-material/Close';
function Formulabar({propsvalue,closeBottomSidebar}) {
    const bottomsidebarRef = useRef(null);
 
 
 const [isBottomPanelresizing, setIsBottomPanelresizing] = useState(false);
 const [BottomPanelheight, setBottomPanelheight] = useState(150); // Corrected variable name
 const minBottomPanelheight = 100;
 const [isCollapsed,setIsCollapsed]=useState(false);
 const [isFormulaBarVisible, setFormulaBarVisible] = useState(false);
 const [isReferenceVisible, setReferenceVisible] = useState(false);
 const [isBottomSidebarOpen, setBottomSidebarOpen] = useState(true);
 const [isOpen,setIsOpen]=useState(true);
 const [sidebarWidth, setSidebarWidth] = useState(200);
 const [costPanelWidth, setCostPanelWidth] = useState(322);
  
  
 const showFormulaBar = () => {
    setFormulaBarVisible(true);
    setReferenceVisible(false);
    setBottomSidebarOpen(true);
  };
  
  const showReference = () => {
    setFormulaBarVisible(false);
    setReferenceVisible(true);
    setBottomSidebarOpen(true);
  };
 
  const openbottombar=()=>{
    setIsOpen(true);
  }
  const startBottomPanelResizing = (mouseDownEvent) => {
    setIsBottomPanelresizing({
      initialHeight: BottomPanelheight,
      mouseY: mouseDownEvent.clientY,
    });
  };
  
  const stopBottomPanelResizing = () => {
    setIsBottomPanelresizing(false);
  };
  
  const toggleBottomPanel = () => {
    if (BottomPanelheight <= minBottomPanelheight) {
      setBottomPanelheight(300); // Set the desired maximum height when expanded
    } else {
      setBottomPanelheight(minBottomPanelheight); // Set the minimum height when collapsed
    }
  };

   
  const toggleBottomPanelclose = () => {
    if (BottomPanelheight > minBottomPanelheight) {
      // If the sidebar is at the minimum width, expand it
      setBottomPanelheight(50); // Set the desired width when expanded
    } else {
        setIsBottomPanelresizing(isBottomPanelresizing);
    }
}
const bottomresize = (mouseMoveEvent) => {
    if (isBottomPanelresizing) {
      const mouseX = mouseMoveEvent.clientX;
      const initialX = isBottomPanelresizing.mouseX;
      const deltaX = mouseX - initialX;

      let newWidth = isBottomPanelresizing.initialWidth + deltaX;

      // Ensure the new width doesn't go below the minimum or above the maximum
      newWidth = Math.max(minBottomPanelheight, newWidth);
      newWidth = Math.min(200, newWidth); // Set the maximum width as needed

      setBottomPanelheight(newWidth);
    }
  };
  React.useEffect(() => {
    window.addEventListener("mousemove",  bottomresize);
    window.addEventListener("mouseup", stopBottomPanelResizing);
    return () => {
      window.removeEventListener("mousemove",  bottomresize);
      window.removeEventListener("mouseup", stopBottomPanelResizing);
    };
  }, [bottomresize, stopBottomPanelResizing]);
//   // Get the formula bar element
// const formulaBar = document.querySelector('.formulabar');

// // Get the sidebar and cost panel elements
// const sidebar = document.querySelector('.Sidebar');
// const costPanel = document.querySelector('.costpanel');

// // Update the width of the formula bar to match the width of the browser window minus the widths of the sidebars and cost panel
// function updateFormulaBarWidth() {
//   const formulaBarWidth = window.innerWidth - sidebar.offsetWidth - costPanel.offsetWidth;

//   formulaBar.style.width = `${formulaBarWidth}px`;
// }

// // Update the width of the formula bar whenever the window is resized or the sidebars or cost panel are resized
// window.addEventListener('resize', updateFormulaBarWidth);
// sidebar.addEventListener('resize', updateFormulaBarWidth);
// costPanel.addEventListener('resize', updateFormulaBarWidth);

 
  

return (
  
  
 
    <div
        ref={bottomsidebarRef}
        className={`bottom-app-sidebar vertical ${isCollapsed ? 'collapsed' : ''}`}
        style={{ height: BottomPanelheight}}
        onMouseDown={(e) => {
          e.preventDefault();
         
        }}
       
       
      >
        
       
        <div className="bottom-app-sidebar-content" >
        <div className="bottom-app-sidebar-resizer" onMouseDown={startBottomPanelResizing} />
          <div className='bottom-box' style={{height:"30px",display:"flex"}} ref={bottomsidebarRef}>
            <h6 style={{color:"white"}}  onClick={showFormulaBar}>Formula Bar</h6>
            <h6 style={{color:"white",marginLeft:"20px"}}  onClick={showReference}>Reference Material</h6>
            <CloseIcon className="close-icon"  onClick={closeBottomSidebar} />

            </div>

            {isFormulaBarVisible && (
        <div className="text-center mt-1">
          <h6 style={{ alignItems: "center", color: "black" }}>Formula Bar</h6>
          <h6>
            <i>ability to modify formula of child elements</i>
          </h6>
          <h6>Raw Materials = Sum of (Feedstock 1, Feedstock 2, ...)</h6>
          <h6>value:{propsvalue}</h6>
        </div>
      )}

        {isReferenceVisible&&(<div className='text-center mt-1'> <h6 style={{alighItem:"center",color: "black"}} >
            Reference Material(92154554)
           </h6>
           <h6>
           <i>slow current calculation based on selected element</i> 
           </h6>
           <h6>Raw Material Cost=Sum of(Feedstock 1(3.5), Feedstock 2(5.0))</h6>
           </div>)}
           

         
        </div>
      </div>
      

  
);
}

export default Formulabar;body{
  margin: 0;
  font-family: var(--bs-body-font-family);
 
}

.dndflow {
  flex-direction: column;
  display: flex;
  flex-grow: 1;
 height:100%
  
}

.dndflow aside {
  border-right: 1px solid #eee;
  padding: 15px 10px;
  font-size: 12px;
  background: #fcfcfc;
}

.dndflow aside .description {
  margin-bottom: 10px;
}

.dndflow .dndnode {
  height: 20px;
  padding: 6px;
  border: 1px solid #1a192b;
  border-radius: 2px;
  margin-bottom: 10px;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: grab;
  overflow: hidden;
  text-decoration: none;
  font-size: 12px;
 
}

.dndflow .dndnode.input {
  border-color: #0041d0;
  margin-top: 10px;
  overflow: hidden;
  text-decoration: none;
  font-size: 12px;
}

.dndflow .dndnode.output {
  border-color: #ff0072;
  text-decoration: none;
  font-size: 12px;
}

.dndflow .reactflow-wrapper {
  flex-grow: 1;
  height: 450px;

  
}

.dndflow .selectall {
  margin-top: 10px;
}

@media screen and (min-width: 768px) {
  .dndflow {
    flex-direction: row;
  }

  .dndflow aside {
    width: 20%;
    max-width: 250px;
  }
}
.react-flow__node-default, .react-flow__node-input, .react-flow__node-output, .react-flow__node-group {
  padding: 5px !important;
  border-radius: 3px;
  width: 60px !important;
  font-size: 7px !important;
  color: #222;
  text-align: center;
  border-width: 0.2px !important;
  border-style: solid;
  border-color: #1a192b;
  background-color: white;
}
.react-flow__attribution {
  font-size: 0px !important;
  background: rgba(255, 255, 255, 0.5);
  padding: 2px 3px;
  margin: 0;
}
.content-wrapper{
  display: flex;
}

.app-sidebar {
  flex-grow: 0;
  flex-shrink: 0;
  min-width: 50px;
  max-width: 200px;
  display: flex;
  border-right: 1px solid #e9e9e9;
  flex-direction: row;
  background: #f0eeee;
  
  
 
  z-index: 2;
  overflow: hidden;
  position: "relative";
 
  
}
.app-sidebar .app-sidebar-content {
  flex: 1;
  overflow: hidden;
  position: "relative";
  align-items: "center";
margin-left: "20px";
}

.app-sidebar .app-sidebar-resizer {
  flex-grow: 0;
  flex-shrink: 0;
  flex-basis: 6px;
  justify-self: flex-end;
  cursor: col-resize;
  resize: horizontal;
  overflow: hidden;
  position: "relative"
}

.app-sidebar .app-sidebar-resizer:hover {
  width: 3px;
  background: #c1c3c5b4;
  overflow: hidden;
  position: "relative"
}

.heading-box {
  /* background-color: white; */
  padding: 4px;
  overflow: hidden;
  /* border: 1px solid rgb(9, 9, 9); */
 
  margin-top: 10px;
 
 
 }
 .elements{
  margin-top: 10px;
 }

 .right-app-sidebar {
  flex-grow: 0;
  flex-shrink: 0;
  min-width: 50px;
  max-width: 322px;
  display: flex;
  border-right: 1px solid #e9e9e9;
  flex-direction: row;
  background: #f0eeee;
 
  z-index: 2;
  overflow: hidden;
 
 
}

.right-app-sidebar .right-app-sidebar-content {
  flex: 1;
  overflow: hidden;
  position: "relative"
}

.right-app-sidebar .right-app-sidebar-resizer {
  flex-grow: 0;
  flex-shrink: 0;
  flex-basis: 6px;
  justify-self: flex-end;
  cursor: col-resize;
  resize: horizontal;
  overflow: hidden;
  position: "relative"
  
}

.right-app-sidebar .right-app-sidebar-resizer:hover {
  width: 3px;
  background: #c1c3c5b4;
  
  
}
.right-heading-box {
  /* background-color:white; */
  padding: 4px;
  overflow: hidden;
 
  margin-top: 10px;
  /* border: 1px solid rgb(10, 9, 9); */
  
 }
 /* .table{
 
  border: 1px solid rgb(18, 18, 18);
 
  /* margin-top: 10px;
  align-content: center; 
 
 } */
  td{
 
    font-size: 12px;

  
 }
 thead{
  font-size: 14px;
 }


.bottom-app-sidebar {
  flex-grow: 1; /* Grow horizontally */
  flex-shrink: 0;
  min-height:50px; 
  max-height: 150px; 
  
  flex-direction: row; /* Set the direction to horizontal */
  background: #ffffff;
  box-shadow: 2px 8px 22px -7px rgba(0, 0, 0, 0.25); 
  margin-bottom: 100px;
  width: 720px;
 

 
 
 
  overflow: hidden;
  position:relative;
 

  
  background: #c1c3c5b4;
}

.bottom-app-sidebar .bottom-app-sidebar-content {
 overflow: hidden;
 
}

.bottom-app-sidebar .bottom-app-sidebar-resizer {
 
  flex-basis: 10px;
  
  overflow: hidden;
  resize:vertical;
   
 
}





.bottom-right-app-sidebar .bottom-right-app-sidebar-resizer:hover {
  width: 3px;
  background: #c1c3c5b4;
  
  
}

.bottom-box {
  background-color: #0e0d0d;
  padding: 4px;
  overflow: hidden;
  
  
 
 }







 




.bottom-app-sidebar .bottom-app-sidebar-resizer:hover {
  width: 3px;
  background: #c1c3c5b4;
  
  
}

.close-icon {
  
  color: white;
 
  position: absolute;
  right: 10px;
  transition: right 0.3s; 
 
 
  
}
/* eslint-disable import/no-anonymous-default-export */

import React, { useState, useRef, useCallback } from 'react';
import "./index.css";

import MenuIcon from '@mui/icons-material/Menu';

export default () => {
  const onDragStart = (event, nodeType) => {
    event.dataTransfer.setData('application/reactflow', nodeType);
    event.dataTransfer.effectAllowed = 'move';
  };
  const nodeNumber={
    "Price Model":1,
    "Total Materials":2
  }
  const sidebarRef = useRef(null);
  const [clickNode,setClickNode]=useState(null)
 
 const [isResizing, setIsResizing] = useState(false);
 const [sidebarWidth, setSidebarWidth] = useState(200);
 const minSidebarWidthWithText = 50;
 const [isCollapsed,setIsCollapsed]=useState(false);
 const startResizing = React.useCallback((mouseDownEvent) => {
  setIsResizing(true);
 }, []);
 const stopResizing = React.useCallback(() => {
  setIsResizing(false);
 }, []);
 const togglesidePanel = () => {
  if (sidebarWidth <= minSidebarWidthWithText) {
    // If the sidebar is at the minimum width, expand it
    setSidebarWidth(261); // Set the desired width when expanded
  } else {
    setIsCollapsed(!isCollapsed);
  }
};
const handleClick=(nodeType)=>{
  const number=nodeNumber[nodeType];
  setClickNode(number);
}
const togglesidePanelclose = () => {
  if (sidebarWidth > minSidebarWidthWithText) {
    // If the sidebar is at the minimum width, expand it
    setSidebarWidth(50); // Set the desired width when expanded
  } else {
    setIsCollapsed(isCollapsed);
  }
};
const resize = React.useCallback(
  (mouseMoveEvent) => {
   if (isResizing) {
    const newWidth =
     mouseMoveEvent.clientX -
     sidebarRef.current.getBoundingClientRect().left;
    setSidebarWidth(newWidth);
    
   }
  },
  [isResizing]
 );
 React.useEffect(() => {
  window.addEventListener("mousemove", resize);
  window.addEventListener("mouseup", stopResizing);
  return () => {
   window.removeEventListener("mousemove", resize);
   window.removeEventListener("mouseup", stopResizing);
  };
 }, [resize, stopResizing]);


  return (
    <div
    ref={sidebarRef}
    className={`app-sidebar ${isCollapsed?'collapsed':``}`}
    style={{ width: sidebarWidth,height:"100vh" }}
   
   >
    <div className="app-sidebar-content">
     <div
      className='logotext'
      style={{ textAlign: 'center', marginLeft: sidebarWidth > minSidebarWidthWithText ? "6px" : "10px" }}
     >
      {sidebarWidth > minSidebarWidthWithText || isResizing || isCollapsed? (
        <div>
       <div
        className="heading-box mt-3"
        style={{
         display: 'flex',
         alignItems: 'center',
         width: { sidebarWidth },
         position: "relative",
         height:"30px",
         marginLeft:"15px"
    
        }}
       >
        <MenuIcon style={{ marginRight: '10px', color: "black" }} onClick={togglesidePanelclose}/>
        <h5 className="mt-2" style={{ marginLeft: "5px", color: "black" }}>Price Model</h5>
       </div>
      
      

  
      <div className="dndnode input" onDragStart={(event) => onDragStart(event, 'Price Model')} draggable onClick={()=>handleClick("Price Model")}>
        Price Model
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'Total Materials')} draggable>
        Total Materials
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'Conversion and Fees')} draggable>
       Conversion and Fees
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'Logistics')} draggable>
        Logistics
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'Raw Material')} draggable>
        Raw Material
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'Packing')} draggable>
        Packing
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'Manufacturing')} draggable>
        Manufacturing
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'Labor')} draggable>
        Labor
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'Fees')} draggable>
        Fees
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'Transportation')} draggable>
      Transportation
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'Warehousing')} draggable>
      Warehousing
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'Materials')} draggable>
     Materials
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'FeedStock')} draggable>
    FeedStock
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'Equipment')} draggable>
      Equipment
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'Energy')} draggable>
 Energy
      </div>

      <div className="dndnode output" onDragStart={(event) => onDragStart(event, 'Last Node')} draggable>
        Last Node
      </div>
     {clickNode}
    
   
 
      
    
      
       
      


     
    

      </div>

      ) : (
       <MenuIcon onClick={togglesidePanel}/>)
      }


     </div>
    

    
     
    
    
     
     
    </div>
    <div className="app-sidebar-resizer" onMouseDown={startResizing} />
   </div>
   
  );
};
