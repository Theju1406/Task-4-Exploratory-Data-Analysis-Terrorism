import React, { useState, useRef, useCallback } from 'react';
import ReactFlow, {
  ReactFlowProvider,
  addEdge,
  useNodesState,
  useEdgesState,
  Controls,
} from 'reactflow';
import 'reactflow/dist/style.css';

import Sidebar from './Sidebar';
import Costpanel from './costpanel';

import './index.css';

const initialNodes = [
  {
    id: '1',
    type: 'input',
    data: { label: 'Price Model' },
    position: { x: 250, y: 5 },
  },
];

let id = 0;
const getId = () => `dndnode_${id++}`;

const DnDFlow = () => {
  const reactFlowWrapper = useRef(null);
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  const [reactFlowInstance, setReactFlowInstance] = useState(null);
  
  const [costPanelWidth,setCostPanelWidth]=useState(261);
  const minCostPanelWidth=100;
  
  const updateCenterContentMargin=(newWidth)=>{
    const margin=300-newWidth;
    reactFlowWrapper.current.style.marginLeft=`${margin}px`;
    setCostPanelWidth(margin);
  }
  const toggleCostPanel=()=>{
    if(costPanelWidth<=minCostPanelWidth){
      setCostPanelWidth(300)

    }else{
      setCostPanelWidth(minCostPanelWidth);
    }
  }

  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), []);

  const onDragOver = useCallback((event) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';
  }, []);

  const onDrop = useCallback(
    (event) => {
      event.preventDefault();

      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();
      const type = event.dataTransfer.getData('application/reactflow');

      // check if the dropped element is valid
      if (typeof type === 'undefined' || !type) {
        return;
      }

      const position = reactFlowInstance.project({
        x: event.clientX - reactFlowBounds.left,
        y: event.clientY - reactFlowBounds.top,
      });
      const newNode = {
        id: getId(),
        type,
        position,
        data: { label: `${type} ` },
      };

      setNodes((nds) => nds.concat(newNode));
    },
    [reactFlowInstance]
  );

  return (
    
    <div className="dndflow">
      <ReactFlowProvider>
      <Sidebar />
      
     
      <div className="reactflow-wrapper" ref={reactFlowWrapper} style={{ height: 900 }}>
          <ReactFlow
            nodes={nodes}
            edges={edges}
            onNodesChange={onNodesChange}
            onEdgesChange={onEdgesChange}
            onConnect={onConnect}
            onInit={setReactFlowInstance}
            onDrop={onDrop}
            onDragOver={onDragOver}
            fitView
          >
            <Controls />
          </ReactFlow>
          
        </div>
     
        <Costpanel updateCenterContentMargin={updateCenterContentMargin}
        toggleCostPanel={toggleCostPanel}/>
    
      
       
        
      </ReactFlowProvider>
       </div>
      
  );
};

export default DnDFlow;
import React, { useState, useRef, useCallback } from 'react';
import "./index.css";

import MenuIcon from '@mui/icons-material/Menu';
function Costpanel({updateCenterContentMargin}) {
   
const costsidebarRef = useRef(null);
 
 const [isCostPanelresizing, setIsCostPanelresizing] = useState(false);

 const [costPanelWidth, setCostPanelWidth] = useState(322);
 const minCostPanelWidth = 50;


 const [isCollapsed,setIsCollapsed]=useState(false);
  const startCostPanelResizing = (mouseDownEvent) => {
  setIsCostPanelresizing({
    resizing: true,
    initialX: mouseDownEvent.clientX,
  });
};

 

 const stopCostPanelResizing = () => {
  setIsCostPanelresizing( false);
};



 
  const toggleCostPanel = () => {
    if (costPanelWidth <= minCostPanelWidth) {
      // If the cost sidebar is at the minimum width, expand it
      setCostPanelWidth(322); // Set the desired width when expanded
    } else {
      setIsCostPanelresizing(!isCostPanelresizing);
    }
    updateCenterContentMargin(costPanelWidth)
   
   
  };
  const togglecostPanelclose = () => {
    if (costPanelWidth > minCostPanelWidth) {
      // If the sidebar is at the minimum width, expand it
      setCostPanelWidth(50); // Set the desired width when expanded
    } else {
        setIsCostPanelresizing(isCostPanelresizing);

    }
     updateCenterContentMargin(minCostPanelWidth)
    
}


  

  



 const costresize = (mouseMoveEvent) => {
  if (isCostPanelresizing) {
    const mouseX = mouseMoveEvent.clientX;
    const initialX = isCostPanelresizing.initialX;
    const deltaX = mouseX - initialX;

    let newWidth = costPanelWidth- deltaX;
    
   
   

    // Ensure the new width doesn't go below the minimum or above the maximum
    newWidth = Math.max(minCostPanelWidth, newWidth);
   

    setCostPanelWidth(newWidth);
  
   updateCenterContentMargin(newWidth);
   isCostPanelresizing.initialX = mouseX;
  }
};
 React.useEffect(() => {
  window.addEventListener("mousemove", costresize);
  window.addEventListener("mouseup", stopCostPanelResizing);
  return () => {
   window.removeEventListener("mousemove",costresize);
   window.removeEventListener("mouseup", stopCostPanelResizing);
  };
 }, [costresize, stopCostPanelResizing]);
return (
  <div
  ref={costsidebarRef}
  className="right-app-sidebar"
  style={{
    width: costPanelWidth,
    
  }}
  onMouseDown={(e) => e.preventDefault()}
>
  <div className="right-app-sidebar-resizer" onMouseDown={startCostPanelResizing} />
  
  <div className="right-app-sidebar-content">
    <div
      className='logotext'
      style={{ textAlign: 'center', marginLeft: costPanelWidth > minCostPanelWidth ? "6px" : "10px" }}
    >
      {costPanelWidth > minCostPanelWidth || isCostPanelresizing ? (
        <div>
        <div
          className="right-heading-box mt-1"
          style={{
            display: 'flex',
            alignItems: 'center',
            width:"200px",
            position: "relative",
            height:"30px",
            marginLeft:"50px"
           
          }}
        >
          <MenuIcon style={{ marginRight: '10px',color: "black" }} onClick={togglecostPanelclose} />
          <h4 className="mt-2" style={{ marginLeft: "10px", color: "black" }}>Costing Panel</h4>
          </div>
          <div>
          <table  className='table'>
            <thead>
  <tr>
    <th>Feedstock ID</th>
    <th>Vendor ID</th>
    <th>Cost Per Unit</th>
    <th>Unit of Measure</th>
  </tr>
  </thead>
  <tr>
    <td>Feedstock 1</td>
    <td>03987</td>
    <td>9770990</td>
    <td>-997557</td>
  </tr>
  <tr>
    <td>Feedstock 2</td>
    <td>8768709</td>
    <td>057576</td>
    <td>098765687</td>
  </tr>
  <tr>
    <td>Feedstock 3</td>
    <td>098765</td>
    <td>4567</td>
    <td>48798</td>
  </tr>
  <tr>
    <td>Feedstock 4</td>
    <td>675475</td>
    <td>7865</td>
    <td>09875</td>
  </tr>
</table>

            </div>
            <div>
            <table border={1} className='table'>
            <thead>
  <tr>
    <th>Material ID</th>
    <th>Feedstock ID</th>
    <th>Usage</th>
    <th>Unit</th>
  </tr>
  </thead>
  <tr>
    <td>4556765</td>
    <td>Feedstock 1</td>
    <td>9770990</td>
    <td>Percent</td>
  </tr>
  <tr>
    <td>347654</td>
    <td>Feedstock 2</td>
    <td>4567765</td>
    <td>Percent</td>
  </tr>
  <tr>
    <td>234567</td>
    <td>Feedstock 3</td>
    <td>-0984567</td>
    <td>Percent</td>
  </tr>
  <tr>
    <td>56789</td>
    <td>Feedstock 4</td>
    <td>7865</td>
    <td>Percent</td>
  </tr>
</table>
                
                </div>
          </div>

          
        
      ) : (
        <MenuIcon onClick={toggleCostPanel} />
      )}
    </div>
  </div>
</div>
);
}

export default Costpanel;

.dndflow {
  flex-direction: column;
  display: flex;
  flex-grow: 1;
 height:100vh
  
}

.dndflow aside {
  border-right: 1px solid #eee;
  padding: 15px 10px;
  font-size: 12px;
  background: #fcfcfc;
}

.dndflow aside .description {
  margin-bottom: 10px;
}

.dndflow .dndnode {
  height: 20px;
  padding: 4px;
  border: 1px solid #1a192b;
  border-radius: 2px;
  margin-bottom: 10px;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: grab;
  overflow: hidden;
 
}

.dndflow .dndnode.input {
  border-color: #0041d0;
  margin-top: 10px;
  overflow: hidden;
}

.dndflow .dndnode.output {
  border-color: #ff0072;
}

.dndflow .reactflow-wrapper {
  flex-grow: 1;
  height: 100%;
  
}

.dndflow .selectall {
  margin-top: 10px;
}

@media screen and (min-width: 768px) {
  .dndflow {
    flex-direction: row;
  }

  .dndflow aside {
    width: 20%;
    max-width: 250px;
  }
}
.react-flow__node-default, .react-flow__node-input, .react-flow__node-output, .react-flow__node-group {
  padding: 5px !important;
  border-radius: 3px;
  width: 60px !important;
  font-size: 7px !important;
  color: #222;
  text-align: center;
  border-width: 0.2px !important;
  border-style: solid;
  border-color: #1a192b;
  background-color: white;
}
.react-flow__attribution {
  font-size: 0px !important;
  background: rgba(255, 255, 255, 0.5);
  padding: 2px 3px;
  margin: 0;
}

.app-sidebar {
  flex-grow: 0;
  flex-shrink: 0;
  min-width: 50px;
  max-width: 200px;
  display: flex;
  border-right: 1px solid #e9e9e9;
  flex-direction: row;
  background: #f0eeee;
  
  
 
  z-index: 2;
  overflow: hidden;
  position: "relative";
 
  
}
.app-sidebar .app-sidebar-content {
  flex: 1;
  overflow: hidden;
  position: "relative";
  align-items: "center";
margin-left: "20px";
}

.app-sidebar .app-sidebar-resizer {
  flex-grow: 0;
  flex-shrink: 0;
  flex-basis: 6px;
  justify-self: flex-end;
  cursor: col-resize;
  resize: horizontal;
  overflow: hidden;
  position: "relative"
}

.app-sidebar .app-sidebar-resizer:hover {
  width: 3px;
  background: #c1c3c5b4;
  overflow: hidden;
  position: "relative"
}

.heading-box {
  background-color: white;
  padding: 4px;
  overflow: hidden;
  border: 1px solid rgb(9, 9, 9);
 
  margin-top: 10px;
 
 
 }
 .elements{
  margin-top: 10px;
 }

 .right-app-sidebar {
  flex-grow: 0;
  flex-shrink: 0;
  min-width: 50px;
  max-width: 322px;
  display: flex;
  border-right: 1px solid #e9e9e9;
  flex-direction: row;
  background: #f0eeee;
 
  z-index: 2;
  overflow: hidden;
  padding-right: 20px;
 
}

.right-app-sidebar .right-app-sidebar-content {
  flex: 1;
  overflow: hidden;
  position: "relative"
}

.right-app-sidebar .right-app-sidebar-resizer {
  flex-grow: 0;
  flex-shrink: 0;
  flex-basis: 6px;
  justify-self: flex-end;
  cursor: col-resize;
  resize: horizontal;
  overflow: hidden;
  position: "relative"
  
}

.right-app-sidebar .right-app-sidebar-resizer:hover {
  width: 3px;
  background: #c1c3c5b4;
  
  
}
.right-heading-box {
  background-color:white;
  padding: 4px;
  overflow: hidden;
 
  margin-top: 10px;
  border: 1px solid rgb(10, 9, 9);
  
 }
 .table{
  font-family:'Times New Roman', Times, serif;
  border: 1px solid rgb(18, 18, 18);
 
  margin-top: 10px;
  align-content: center;
 
 }
 th,td{
  border: 1px solid rgb(18, 18, 18);
  font-family:'Times New Roman', Times, serif;
  
  text-align: center;
  
 }
 tr:nth-child(even) {
  background-color: #dddddd;
}

/* eslint-disable import/no-anonymous-default-export */

import React, { useState, useRef, useCallback } from 'react';
import "./index.css";

import MenuIcon from '@mui/icons-material/Menu';

export default () => {
  const onDragStart = (event, nodeType) => {
    event.dataTransfer.setData('application/reactflow', nodeType);
    event.dataTransfer.effectAllowed = 'move';
  };
  const sidebarRef = useRef(null);
 
 const [isResizing, setIsResizing] = useState(false);
 const [sidebarWidth, setSidebarWidth] = useState(200);
 const minSidebarWidthWithText = 50;
 const [isCollapsed,setIsCollapsed]=useState(false);
 const startResizing = React.useCallback((mouseDownEvent) => {
  setIsResizing(true);
 }, []);
 const stopResizing = React.useCallback(() => {
  setIsResizing(false);
 }, []);
 const togglesidePanel = () => {
  if (sidebarWidth <= minSidebarWidthWithText) {
    // If the sidebar is at the minimum width, expand it
    setSidebarWidth(261); // Set the desired width when expanded
  } else {
    setIsCollapsed(!isCollapsed);
  }
};
const togglesidePanelclose = () => {
  if (sidebarWidth > minSidebarWidthWithText) {
    // If the sidebar is at the minimum width, expand it
    setSidebarWidth(50); // Set the desired width when expanded
  } else {
    setIsCollapsed(isCollapsed);
  }
};
const resize = React.useCallback(
  (mouseMoveEvent) => {
   if (isResizing) {
    const newWidth =
     mouseMoveEvent.clientX -
     sidebarRef.current.getBoundingClientRect().left;
    setSidebarWidth(newWidth);
    
   }
  },
  [isResizing]
 );
 React.useEffect(() => {
  window.addEventListener("mousemove", resize);
  window.addEventListener("mouseup", stopResizing);
  return () => {
   window.removeEventListener("mousemove", resize);
   window.removeEventListener("mouseup", stopResizing);
  };
 }, [resize, stopResizing]);


  return (
    <div
    ref={sidebarRef}
    className={`app-sidebar ${isCollapsed?'collapsed':``}`}
    style={{ width: sidebarWidth,height:"100vh" }}
   
   >
    <div className="app-sidebar-content">
     <div
      className='logotext'
      style={{ textAlign: 'center', marginLeft: sidebarWidth > minSidebarWidthWithText ? "6px" : "10px" }}
     >
      {sidebarWidth > minSidebarWidthWithText || isResizing || isCollapsed? (
        <div>
       <div
        className="heading-box mt-3"
        style={{
         display: 'flex',
         alignItems: 'center',
         width: { sidebarWidth },
         position: "relative",
         height:"30px"
    
        }}
       >
        <MenuIcon style={{ marginRight: '10px', color: "black" }} onClick={togglesidePanelclose}/>
        <h4 className="mt-2" style={{ marginLeft: "5px", color: "black" }}>Price Model</h4>
       </div>
      
      

  
      <div className="dndnode input" onDragStart={(event) => onDragStart(event, 'Price Model')} draggable>
        Price Model
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'Total Materials')} draggable>
        Total Materials
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'Logistics')} draggable>
        Logistics
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'Raw Material')} draggable>
        Raw Material
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'Packing')} draggable>
        Packing
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'a1')} draggable>
        a1
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'a2')} draggable>
        a2
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'a3')} draggable>
        a3
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'a4')} draggable>
        a4
      </div>
      <div className="dndnode" onDragStart={(event) => onDragStart(event, 'a5')} draggable>
        a5
      </div>
      <div className="dndnode output" onDragStart={(event) => onDragStart(event, 'Last Node')} draggable>
        Last Node
      </div>
     
    
   
 
      
    
      
       
      


     
    

      </div>

      ) : (
       <MenuIcon onClick={togglesidePanel}/>)
      }


     </div>
    

    
     
    
    
     
     
    </div>
    <div className="app-sidebar-resizer" onMouseDown={startResizing} />
   </div>
   
  );
};
