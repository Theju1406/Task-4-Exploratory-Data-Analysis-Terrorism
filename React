import React, { useState, useRef } from 'react';
import "../index.css";
import MenuIcon from '@mui/icons-material/Menu';
import ArrowForwardIcon from '@mui/icons-material/ArrowForward';
import CloseIcon from '@mui/icons-material/Close';

function Pricemodel() {
 const sidebarRef = useRef(null);
 const boxContainerRef = useRef(null); // Added ref for the box container
 const [isResizing, setIsResizing] = useState(false);
 const [sidebarWidth, setSidebarWidth] = useState(261);

 const costsidebarRef = useRef(null);
 const minSidebarWidthWithText = 100;
 const [isCostPanelresizing, setIsCostPanelresizing] = useState(false);
 const [costPanelWidth, setCostPanelWidth] = useState(300);
 const minCostPanelWidth = 100;
 const [isCollapsed,setIsCollapsed]=useState(false);
 
 const startResizing = React.useCallback((mouseDownEvent) => {
  setIsResizing(true);
 }, []);

 const startCostPanelResizing =React.useCallback( (mouseDownEvent) => {
  setIsCostPanelresizing(true);
 },[]);

 const stopResizing = React.useCallback(() => {
  setIsResizing(false);
 }, []);

 const stopCostPanelResizing = React.useCallback(() => {
  setIsCostPanelresizing(false);
 },[]);


 const togglesidePanel = () => {
    if (sidebarWidth <= minSidebarWidthWithText) {
      // If the sidebar is at the minimum width, expand it
      setSidebarWidth(261); // Set the desired width when expanded
    } else {
      setIsCollapsed(!isCollapsed);
    }
  };
  const togglesidePanelclose = () => {
    if (sidebarWidth > minSidebarWidthWithText) {
      // If the sidebar is at the minimum width, expand it
      setSidebarWidth(50); // Set the desired width when expanded
    } else {
      setIsCollapsed(isCollapsed);
    }
  };
  const toggleCostPanel = () => {
    if (costPanelWidth <= minCostPanelWidth) {
      // If the cost sidebar is at the minimum width, expand it
      setCostPanelWidth(300); // Set the desired width when expanded
    } else {
      setIsCostPanelresizing(!isCostPanelresizing);
    }
  };
  const togglecostPanelclose = () => {
    if (costPanelWidth > minCostPanelWidth) {
      // If the sidebar is at the minimum width, expand it
      setCostPanelWidth(50); // Set the desired width when expanded
    } else {
        setIsCostPanelresizing(isCostPanelresizing);
    }
}


 const resize = React.useCallback(
  (mouseMoveEvent) => {
   if (isResizing) {
    const newWidth =
     mouseMoveEvent.clientX -
     sidebarRef.current.getBoundingClientRect().left;
    setSidebarWidth(newWidth);
    
   }
  },
  [isResizing]
 );
 const costresize = React.useCallback(
    (mouseMoveEvent) => {
      if (isCostPanelresizing) {
        const newWidth =
          costsidebarRef.current.getBoundingClientRect().right - mouseMoveEvent.clientX;
       
          setCostPanelWidth(newWidth);
        
      }
    },
    [isCostPanelresizing]
  );
  
  

 

 

 
 
 
 

 React.useEffect(() => {
  window.addEventListener("mousemove", resize);
  window.addEventListener("mouseup", stopResizing);
  return () => {
   window.removeEventListener("mousemove", resize);
   window.removeEventListener("mouseup", stopResizing);
  };
 }, [resize, stopResizing]);

 
 React.useEffect(() => {
  window.addEventListener("mousemove", costresize);
  window.addEventListener("mouseup", stopCostPanelResizing);
  return () => {
   window.removeEventListener("mousemove",costresize);
   window.removeEventListener("mouseup", stopCostPanelResizing);
  };
 }, [costresize, stopCostPanelResizing]);
 

 return (
  <div className="app-container">
   <div
    ref={sidebarRef}
    className={`app-sidebar ${isCollapsed?'collapsed':``}`}
    style={{ width: sidebarWidth }}
    onMouseDown={(e) => e.preventDefault()}
   >
    <div className="app-sidebar-content">
     <div
      className='logotext'
      style={{ textAlign: 'center', marginLeft: sidebarWidth > minSidebarWidthWithText ? "6px" : "10px" }}
     >
      {sidebarWidth > minSidebarWidthWithText || isResizing || isCollapsed? (
       <div
        className="heading-box mt-1"
        style={{
         display: 'flex',
         alignItems: 'center',
         width: { sidebarWidth },
         position: "relative",
         background: "linear-gradient(90deg,rgb(50,30,100) 20%,rgb(0,0,0) 100%",
        }}
       >
        <MenuIcon style={{ marginRight: '10px', color: "white" }} onClick={togglesidePanelclose}/>
        <h6 className="mt-2" style={{ marginLeft: "10px", color: "White" }}>Price Model</h6>
       </div>
      ) : (
       <MenuIcon onClick={togglesidePanel}/>)
      }

      
     </div>
     
     
    </div>
    <div className="app-sidebar-resizer" onMouseDown={startResizing} />
   </div>
   <div className="app-frame" >
    </div>

   <div
    ref={costsidebarRef}
    className="right-app-sidebar"
    style={{ width:costPanelWidth}}
    onMouseDown={(e) => e.preventDefault()}
   >
     <div className="right-app-sidebar-resizer" onMouseDown={startCostPanelResizing} />
    <div className="right-app-sidebar-content">
     <div
      className='logotext'
      style={{ textAlign: 'center', marginRight: costPanelWidth > minCostPanelWidth ? "6px" : "10px" }}
     >
      {costPanelWidth>minCostPanelWidth || isCostPanelresizing ? (
       <div
        className="right-heading-box mt-1"
        style={{
         display: 'flex',
         alignItems: 'center',
         width: { costPanelWidth },
         position: "relative",
         background: "linear-gradient(90deg,rgb(50,30,100) 20%,rgb(0,0,0) 100%",
        }}
       >
        <MenuIcon style={{ marginRight: '10px', color: "white" }} onClick={togglecostPanelclose}/>
        <h6 className="mt-2" style={{ marginRight: "10px", color: "White" }}>Costing Panel</h6>
       </div>
      ) : (
        
          <MenuIcon onClick={toggleCostPanel}/>
          )
      }
     </div>
     
     
    </div>
    
   </div>
   
  
    


  </div>
  
 );
}

export default Pricemodel;body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.app-container {
  min-height: 100vh;
  padding: 1em 1em;
  display: flex;
  flex-direction: row;
  height: 100vh;
}

.app-sidebar {
  flex-grow: 0;
  flex-shrink: 0;
  min-width: 50px;
  max-width: 300px;
  display: flex;
  border-right: 1px solid #e9e9e9;
  flex-direction: row;
  background: #ffffff;
  box-shadow: -8px 2px 22px -7px rgba(0, 0, 0, 0.25);
  border-radius: 10px 0px 0px 10px;
  z-index: 2;
  overflow: hidden;
  position: "relative"
}

.app-frame {
  flex: 1;
  display: flex;
  flex-direction: column;
  background: white;
  height: 100vh;
  max-height: 100%;
  background: #ffffff;
  box-shadow: 8px 2px 32px -2px rgba(0, 0, 0, 0.25);
  border-radius: 0px 10px 10px 0px;
  z-index: 1;
}

.app-sidebar .app-sidebar-content {
  flex: 1;
  overflow: hidden;
  position: "relative"
}

.app-sidebar .app-sidebar-resizer {
  flex-grow: 0;
  flex-shrink: 0;
  flex-basis: 6px;
  justify-self: flex-end;
  cursor: col-resize;
  resize: horizontal;
  overflow: hidden;
  position: "relative"
}

.app-sidebar .app-sidebar-resizer:hover {
  width: 3px;
  background: #c1c3c5b4;
  overflow: hidden;
  position: "relative"
}

.heading-box {
  background-color: #f2f2f2;
  padding: 8px;
  overflow: hidden;
  height:"10px";
  width:"100px"
 }

.boxContainerRef {
  position: absolute;
  left: 261px;
  width: calc(100% - 261px);
  max-width: 100%;
}
.right-app-sidebar {
  flex-grow: 0;
  flex-shrink: 0;
  min-width: 50px;
  max-width: 300px;
  display: flex;
  border-right: 1px solid #e9e9e9;
  flex-direction: row;
  background: #ffffff;
  box-shadow: -8px 2px 22px -7px rgba(0, 0, 0, 0.25);
  border-radius: 10px 0px 0px 10px;
  z-index: 2;
  overflow: hidden;
 
}

.right-app-sidebar .right-app-sidebar-content {
  flex: 1;
  overflow: hidden;
  position: "relative"
}

.right-app-sidebar .right-app-sidebar-resizer {
  flex-grow: 0;
  flex-shrink: 0;
  flex-basis: 6px;
  justify-self: flex-end;
  cursor: col-resize;
  resize: horizontal;
  overflow: hidden;
  position: "relative"
}

.right-app-sidebar .right-app-sidebar-resizer:hover {
  width: 3px;
  background: #c1c3c5b4;
  
  
}
.right-heading-box {
  background-color: #f2f2f2;
  padding: 8px;
  overflow: hidden;
  height:"10px";
  width:"100px"
 }
